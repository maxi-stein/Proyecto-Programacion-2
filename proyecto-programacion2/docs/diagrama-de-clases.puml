@startuml
hide circle
skinparam classAttributeIconSize 0
skinparam backgroundColor transparent
skinparam monochrome true
skinparam shadowing false

abstract Usuario{
    -codigoUsuario : Integer
    -nombre : String
    -direccion : String
    -fechaInicio
    -pass : String
    -bloqueado : Boolean

    + Usuario(String, String, String)
    + estaBloqueado() : Boolean
    + getCodigoUsuario() : Integer
    + getNombre() : String
    + modificar()
    + mostrarCredenciales()
    + pedirDatosBasicos()
    + proceder()
    + setBloqueo(Boolean)
    + setCodigoUsuario(Integer)
    + setDireccion(String)
    + setNombre(String)
    + setPass(String)
    + toString() : String
    + validarPass(String) : Boolean

    +proceder()
    +validarNombre() : Boolean
    +validarPass() : Boolean
    +mostrarInformacionUsuario()
    +getCodigoUsuario() : Integer
}

class Vendedor extends Usuario{

    +Vendedor(String,String,String,Date,Empresa)
    +captarVendedor(Vendedor)
    +getCantidadVendedoresCapt() : Integer
    +getEmpresaTrabajo() : Empresa
    -listarVendedoresCaptados()
    +modificar()
    +mostarInfo()
    +setEmpresaTrabajo(Empresa)
    +proceder()
}

class Empresa{
    -nombre : String
    -fechaEntrada : Date
    -facturacionAnual : Double
    -codigoEmpresa : Integer
    -bloqueado() : Boolean
    -ciudades : HashMap<Integer, Ciudad>
    -areasMercado : HashMap<Integer, AreaMercado>
    -asesores : ArrayList<VinculacionAsesorEmpresa>

    +Empresa(String,Date,Double)
    +agregarAreaMercado(AreasMercado) : void
    +agregarCiudad(Integer) : void
    +agregarVendedor(Vendedor) : void
    +areaCompatible(AreaMercado) : Boolean
    +eliminarAreaDeMercado(AreaMercado) : void
    +eliminarAsesor(Asesor) : void
    +eliminarCiudad(Ciudad) : void
    +eliminarRegistrosAreaDeMercado() : void
    +eliminarVendedor(Vendedor) : void
    +esAsesoradoPor(Asesor) : void
    +estaBloqueado() : Boolean
    +estaUbicadaEnCiudad(Ciudad) : Boolean
    +getFacturacionAnual() : Double
    +getNombre() : String
    +getSede() : Ciudad
    +listarAreasDeMercado() : void
    +listarCiudades() : void
    +mostrarFechaInicioAsesor(Asesor) : void
    +obtenerAreasDeMercado() : HashMap<Integer, AreaMercado>
    +obtenerCiudades() : HashMap<Integer, Ciudad>
    +seleccionarSede(Ciudad) : void
    +setBloqueo(Boolean) : void
    +setFacturacionAnual(Double) : void
    +setFechaEntrada(LocalDate) : void
    +setNombre(String) : void
    +tieneTrabajadores() : Boolean
}

class AreaMercado {
    -nombre : String
    -descripcion : String
    -bloqueado : Boolean

    +AreaMercado(String, String)
    +estaBloqueado() : Boolean
    +getNombre() : String
    +setBloqueo(Boolean) : void
    +setDescripcion(String) : void
    +toString() : String
}

class Asesor extends Usuario{
    -titulacion : String
    -cantidadMercadoCubiertos : Integer

    +agregaAreaMercadoCubierto(AreaMercado)
    +asesoraArea(AreaMercado : Boolean
    -eliminarAreaMercadoCubierto(Integer)
    +listarMercadosCubiertos()
    +modificar()
    +mostrarInfo()
    +proceder()
    +setTitulacion(String)
    +toString() : String
}

class VinculacionAsesorEmpresa{
    -fechaInicio : Date

    +VinculacionAsesorEmpresa(Asesor,LocalDate)
    +contiene(Asesor) : Boolean
    +getAsesor() : Asesor
    +getFechaInicio() : Date
}

class Admin extends Usuario{
    +modificar()
    +mostrarInfo()
    +proceder()
}

class Pais{
    -nombre : String
    -pbi : Double
    -numHabitantes : double
    -bloqueado : Boolean

    +Pais(String,double,double)
    +esIgual(Pais) : Boolean
    +estaBloqueado() : Boolean
    +getNombre() : Boolean
    +setBloqueado(Boolean)
    +setNombre(String)
    +setNumHabitantes(Double)
    +setPbi(Double)
    +toString() : String
}
class FactoryUsuarios{
 {static} -crearAdmin()
 {static} -crearAsesor()
 {static} +crearUsuario(Integer)
 {static} -crearVendedor()
 {static} -crearVendedorCaptado()
}
class Consola{
    - sc : Scanner

    {static} +leerDouble() : Double
    {static} +leerEntero() : Integer
    {static} +leerFecha() : String
    {static} +mostrarUnRenglon()
    {static} +mostrarVariosRenglones()
}

class Ciudad{
    -nombre: String
    -paisorigen : Pais
    -bloqueado : Boolean
    +Ciudad(String,Pais);
    +esIgual(Ciudad) : Boolean
    +estaBloqueado() : Boolean
    +getNombre() : String
    +getPaisOrigen() : Pais
    +toString() : String
}

class BaseDeDatosSingleton{
    + {static} INSTANCE : BaseDeDatosSingleton

    + {static} agregaAreaDeMercado(AreaMercado)
    + {static} agregarAsesorAEmpresa(Integer, Asesor)
    + {static} agregarCiudad(Ciudad)
    + {static} agregarEmpresa(Empresa)
    + {static} agregarPais(Pais)
    + {static} agregarUsuario(Usuario)
    + {static} areaEnUso(AreaMercado) : Boolean
    - {static} autenticarUsuario(Integer,String) : Usuario
    + {static} cargarDatosSerializados(Usuario[], Empresa[], AreasDeMercado[],Ciudad[]> , Pais[])
    + {static} ciudadEnUso(Ciudad) : Boolean
    + {static} ciudadYaExiste(Ciudad) : Boolean
    + {static} contieneUsuario(Usuario) : Boolean
    + {static} eliminarAreaDeMercado(Integer)
    + {static} eliminarCiudad(Integer)
    + {static} eliminarEmpresa(Integer)
    + {static} eliminarUsuario(Integer)
    + {static} getInstance() : BaseDeDatosSingleton
    + {static} iniciarSesion() : Usuario
    + {static} listarAreasDeMercado()
    + {static} listarCiudades()
    + {static} listarCiudadesDeEmpresa(Integer)
    + {static} listarEmpresas()
    + {static} listarEmpresasQueUtilizanAreaMercado(AreaMercado) : void
    + {static} listarEmpresasQueUtilizanCiudad(Ciudad)
    + {static} listarPaises()
    + {static} listarUsuarios()
    + {static} listarVenderores()
    + {static} modificarUsuario(Integer)
    + {static} obtenerAreasDeMercado() : AreaMercado[]
    + {static} obtenerCiudad() : Ciudad[]
    + {static} obtenerCiudadDeEmpresa(Integer) : Ciudad[]
    + {static} obtenerCodigoMayor() : Integer
    + {static} obtenerEmpresas() : Empresa[]
    + {static} obtenerPaises() : Pais[]
    + {static} obtenerUsuarios() : Usuario[]
    + {static} obtenerVendedores() : Vendedor[]
    + {static} paisYaExiste(Pais) : Boolean
    + {static} usuarioAsesoraAEmpresa(Asesor, Empresa) : Boolean

}

interface CapazDeSerBloqueado <<interface>>{
    +{abstract} estaBloqueado() : Boolean
    +{abstract} setBloqueo(Boolean)
}


class SistemaDeGestion{
    +mostrarMenu() : Integer
    +run()
    -serializarBD()
    -deserializarBD()
    -crearObjectOutputStream(String) : ObjectOutputStream
    -crearObjectInputStream(String) : ObjectInputStream
    -writeObject<T>(T,String)
    -readObject<T>(T,String) : <<generic>>T
    -cargarDatosDefault()
    -cargarUsuarioDefault()
    -cargarAreaDeMercadoDefault()
    -cargarPaisYCiudadDefault()
    -cargarEmpresaDefault()
}

Vendedor "*" o--> Empresa : vendedores
Vendedor -> "*" Vendedor : vendedoresCaptados

Empresa "1"--> "*" AreaMercado : areasMercado

VinculacionAsesorEmpresa "*" <- Empresa: asesores
Ciudad <-o Pais : paisOrigen
Ciudad -> "*" Empresa : ciudades
Empresa <- Ciudad : sede
Asesor "*" --> "*" AreaMercado : mercadosCubiertos
Asesor <-o VinculacionAsesorEmpresa : asesor

Usuario -.|> CapazDeSerBloqueado
Empresa -.|> CapazDeSerBloqueado
AreaMercado --.|> CapazDeSerBloqueado
Ciudad -.|> CapazDeSerBloqueado
Pais -.|> CapazDeSerBloqueado

BaseDeDatosSingleton ---> "*" Usuario : usuarios
BaseDeDatosSingleton --> "*" Empresa : empresas
BaseDeDatosSingleton --> "*" AreaMercado : areasDeMercado
BaseDeDatosSingleton --> "*" Pais : paises
BaseDeDatosSingleton --> "*" Ciudad : ciudades

SistemaDeGestion -> "*" Usuario : usuarios
SistemaDeGestion -> "*" Empresa : empresas
SistemaDeGestion -> "*" AreaMercado : areasDeMercado
SistemaDeGestion -> "*" Pais : paises
SistemaDeGestion -> "*" Ciudad : ciudades

@enduml